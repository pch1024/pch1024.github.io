(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{267:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器-页面加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器-页面加载","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器-页面加载")]),e._v(" "),a("p",[e._v("Chrome DevTools 给我们提供了 2 种常用方式 Audits 和 Performance。 Audits 可以对页面进行性能评分，同时，还会给我们提供一些优化建议。而 Performance 提供了非常多的运行时数据，能让我们看到更多细节数据。")]),e._v(" "),a("h2",{attrs:{id:"页面加载流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面加载流程","aria-hidden":"true"}},[e._v("#")]),e._v(" 页面加载流程")]),e._v(" "),a("p",[e._v("简述流程：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    1 解析 URL 生成请求报文 =>\n    2 检查浏览器缓存 =>\n    3 读取浏览器缓存返回 或者 查找 IP 建立 TCP 连接服务器 =>\n    3 服务器检查缓存 =>\n    4 服务器处理请求返回 3**/4**/5** 响应报文 =>\n    6 浏览器接收、缓存(可选)、解码(gzip) =>\n    7 浏览器解析 HTML(解析、构建、下载同时进行) =>\n        下载资源\n        构建 DOM 树和 CSSOM 树\n        根据 DOM 树和 CSSOM 树构建渲染树\n    8 解析并下载完毕后触发 DOMContentLoaded 事件 =>\n    9 浏览器等待如图片等内容加载、异步脚本加载执行完毕后触发  onLoaded 事件 =>\n    10 页面加载完成\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("具体流程：")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("在浏览器地址栏输入 URL")])]),e._v(" "),a("li",[a("p",[e._v("浏览器解析 URL 获取"),a("code",[e._v("协议")]),e._v("，"),a("code",[e._v("主机")]),e._v("，"),a("code",[e._v("端口")]),e._v("，"),a("code",[e._v("路径")]),e._v("等信息，组装一个 HTTP（GET）请求报文")])]),e._v(" "),a("li",[a("p",[e._v("浏览器获取主机 ip 地址，过程如下：")]),e._v(" "),a("pre",[a("code",[e._v("1. 浏览器缓存\n2. 本机缓存\n3. hosts 文件\n4. 路由器缓存\n5. ISP DNS 缓存\n6. DNS 递归查询（可能存在负载均衡导致每次IP不一样）\n")])])]),e._v(" "),a("li",[a("p",[e._v("打开一个 "),a("code",[e._v("socket")]),e._v(" 与目标 "),a("code",[e._v("IP")]),e._v(" 地址，端口，三次握手建立 "),a("code",[e._v("TCP")]),e._v(" 链接发送 HTTP 请求报文")])]),e._v(" "),a("li",[a("p",[e._v("服务器接受请求并解析，将请求转发到服务程序")])]),e._v(" "),a("li",[a("p",[e._v("服务程序检查 "),a("code",[e._v("HTTP 请求头")]),e._v("是否包含"),a("code",[e._v("缓存新鲜度")]),e._v("验证信息，返回 "),a("code",[e._v("304")]),e._v(" 等对应状态码")])]),e._v(" "),a("li",[a("p",[e._v("处理程序读取完整请求并准备 "),a("code",[e._v("HTTP 响应报文")]),e._v("，可能需要查询数据库等操作")])]),e._v(" "),a("li",[a("p",[e._v("服务器将响应报文通过 "),a("code",[e._v("TCP")]),e._v(" 连接发送回浏览器")])]),e._v(" "),a("li",[a("p",[e._v("浏览器接收 "),a("code",[e._v("HTTP")]),e._v(" 响应，然后根据情况选择"),a("code",[e._v("四次握手关闭 TCP 连接")]),e._v("或者"),a("code",[e._v("保留重用")])])]),e._v(" "),a("li",[a("p",[e._v("浏览器检查响应状态吗：是否为 "),a("code",[e._v("1XX")]),e._v("，"),a("code",[e._v("3XX")]),e._v("，"),a("code",[e._v("4XX")]),e._v("，"),a("code",[e._v("5XX")]),e._v("，这些情况处理与 2XX 不同")])]),e._v(" "),a("li",[a("p",[e._v("如果资源可缓存进行缓存，如果需要解码（gzip 压缩）进行解码，")])]),e._v(" "),a("li",[a("p",[e._v("根据资源类型决定如何处理（假设资源为 HTML 文档）")])]),e._v(" "),a("li",[a("p",[e._v("解析 HTML 文档，构件 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本，这些操作没有严格的先后顺序，以下分别解释")]),e._v(" "),a("pre",[a("code",[e._v("构建 DOM 树：\nTokenizing：根据 HTML 规范将字符流解析为标记\nLexing：词法分析将标记转换为对象并定义属性和规则\nDOM construction：根据 HTML 标记关系将对象组成 DOM 树\n\n解析过程中遇到图片、样式表、js 文件，启动下载\n\n构建 CSSOM 树：\nTokenizing：字符流转换为标记流\nNode：根据标记创建节点\nCSSOM：节点创建CSSOM树\n\n根据 DOM 树和 CSSOM 树构建渲染树:\n从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none\n对每一个可见节点，找到恰当的CSSOM规则并应用\n发布可视节点的内容和计算样式\n\nJS 解析如下：\n浏览器创建 Document 对象并解析 HTML，\n将解析到的元素和文本节点添加到文档中，此时 `document.readystate` 为 `loading`\nHTML 解析器遇到没有 `async` 和 `defer` 的 script 时，将他们添加到文档中，然后执行行内或外部脚本。\n这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。\n这样就可以用 document.write() 把文本插入到输入流中。\n同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容\n当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析文档。\n脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。\n异步脚本禁止使用 document.write() ，它们可以访问自己 script 和之前的文档元素\n当文档完成解析，`document.readState` 变成 `interactive`\n所有 `defer` 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用 document.write()\n浏览器在 Document 对象上触发 `DOMContentLoaded` 事件\n此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，\n等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState 变为 complete,window 触发 load 事件\n")])])]),e._v(" "),a("li",[a("p",[e._v("显示页面（HTML 解析过程中会逐步显示页面）")])])]),e._v(" "),a("h2",{attrs:{id:"重要概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 重要概念")]),e._v(" "),a("h3",{attrs:{id:"浏览器缓存和状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存和状态码","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器缓存和状态码")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("200")]),e._v(" "),a("ul",[a("li",[e._v("本地没有缓或者缓存失效或者禁止缓存强制刷新")])])]),e._v(" "),a("li",[a("p",[e._v("304")]),e._v(" "),a("ul",[a("li",[e._v("由 "),a("code",[e._v("Last-Modified")]),e._v(" 和 "),a("code",[e._v("Etag")]),e._v(" 控制, 当缓存失效或者或者刷新时携带缓存信息发送请求到后端，后端对比信息发现没有变更直接返回 304 状态码。")]),e._v(" "),a("li",[e._v("分布式系统里多台机器间文件的 last-modified 必须保持一致，以免负载均衡到不同机器导致比对失败")]),e._v(" "),a("li",[e._v("分布式系统尽量关闭掉 Etag(每台机器生成的 etag 都会不一样)")])])]),e._v(" "),a("li",[a("p",[e._v("200（from cache）")]),e._v(" "),a("ul",[a("li",[e._v("由 "),a("code",[e._v("Cache-Control (http 1.1版本)")]),e._v(" 和 "),a("code",[e._v("Expires (http 1.0版本)")]),e._v(" 控制,")]),e._v(" "),a("li",[a("code",[e._v("Expires (http 1.0版本)")]),e._v(" 绝对时间，未失效直接返回。")]),e._v(" "),a("li",[a("code",[e._v("Cache-Control (http 1.1版本)")]),e._v(" 相对时间，优先级更高，未失效直接返回。")])])])]),e._v(" "),a("h3",{attrs:{id:"首次内容绘制-fcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次内容绘制-fcp","aria-hidden":"true"}},[e._v("#")]),e._v(" 首次内容绘制 (FCP)")]),e._v(" "),a("p",[e._v("测量在用户导航到您的页面后浏览器呈现第一段 DOM 内容所需的时间。页面上的图像、非白色"),a("code",[e._v("<canvas>")]),e._v("元素和 SVG 被视为 DOM 内容；不包括 iframe 内的任何内容。")]),e._v(" "),a("h3",{attrs:{id:"最大内容绘制-largest-contentful-paint-lcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大内容绘制-largest-contentful-paint-lcp","aria-hidden":"true"}},[e._v("#")]),e._v(" 最大内容绘制 (Largest Contentful Paint/LCP)")]),e._v(" "),a("p",[e._v("最大内容绘制 (LCP) 是一个重要的、以用户为中心的衡量感知加载速度的指标，因为它在页面的主要内容可能已加载时标记了页面加载时间线中的点——快速的 LCP 有助于让用户确信页面是有用的.")]),e._v(" "),a("p",[e._v("最大内容绘制报告的元素大小通常是用户在视口内可见的大小。如果元素延伸到视口之外，或者任何元素被剪裁或具有不可见的溢出，则这些部分不计入元素的大小。")]),e._v(" "),a("p",[e._v("像 load 或 DOMContentLoaded 这样的旧指标并不好，因为它们不一定对应于用户在屏幕上看到的内容。更新的、以用户为中心的性能指标，如 First Contentful Paint (FCP)仅捕获加载体验的最开始。如果页面显示启动画面或显示加载指示器，则这一时刻与用户不太相关。")]),e._v(" "),a("p",[e._v("LCP 考虑的元素类型:")]),e._v(" "),a("pre",[a("code",[e._v("-   `<img>` 元素\n-   `<image>`元素内的`<svg>`元素\n-   `<video>` 元素（使用海报图片）\n-   具有通过该 url()函数加载的背景图像的元素（与 CSS 渐变相反）\n-   包含文本节点或其他内联级文本元素子级的块级元素。\n")])]),e._v(" "),a("h3",{attrs:{id:"首次输入延迟-fid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次输入延迟-fid","aria-hidden":"true"}},[e._v("#")]),e._v(" 首次输入延迟 (FID)")]),e._v(" "),a("p",[e._v("测量从用户第一次与您的网站交互（即当他们单击链接、点击按钮或使用自定义的、由 JavaScript 驱动的控件）到浏览器实际能够运行的时间来回应- 这种互动。(字段)")]),e._v(" "),a("h3",{attrs:{id:"交互时间-time-to-interactive-tti"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交互时间-time-to-interactive-tti","aria-hidden":"true"}},[e._v("#")]),e._v(" 交互时间 (Time To Interactive/TTI)")]),e._v(" "),a("p",[e._v("测量从页面开始加载到可视化呈现、其初始脚本（如果有）已加载并且能够快速可靠地响应用户输入的时间。（实验室）")]),e._v(" "),a("h3",{attrs:{id:"总阻塞时间-total-blocking-time-tbt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总阻塞时间-total-blocking-time-tbt","aria-hidden":"true"}},[e._v("#")]),e._v(" 总阻塞时间 (Total Blocking Time/TBT)")]),e._v(" "),a("p",[e._v("测量 FCP 和 TTI 之间主线程被阻塞足够长的时间以防止输入响应的总时间。（实验室）")]),e._v(" "),a("h3",{attrs:{id:"累积布局偏移-cumulative-layout-shift-cls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#累积布局偏移-cumulative-layout-shift-cls","aria-hidden":"true"}},[e._v("#")]),e._v(" 累积布局偏移 (Cumulative Layout Shift/CLS)")]),e._v(" "),a("p",[e._v("测量在页面开始加载和其生命周期状态变为隐藏之间发生的所有意外布局偏移的累积分数。（实验室，现场）")]),e._v(" "),a("h3",{attrs:{id:"首次绘制（first-paint-fp）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首次绘制（first-paint-fp）","aria-hidden":"true"}},[e._v("#")]),e._v(" 首次绘制（First Paint/FP）")]),e._v(" "),a("p",[e._v("如果第一脚本前的 JS 和 CSS 加载完了，body 中的脚本还未下载完成，那么浏览器就会利用构建好的局部 CSSOM 和 DOM 提前渲染第一脚本前的内容（触发 FP）；")]),e._v(" "),a("p",[e._v("如果第一脚本前的 JS 和 CSS 都还没下载完成，body 中的脚本就已经下载完了，那么浏览器就会在所有 JS 脚本都执行完之后才触发 FP。")]),e._v(" "),a("h3",{attrs:{id:"domcontentloaded-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded-event","aria-hidden":"true"}},[e._v("#")]),e._v(" DOMContentLoaded Event")]),e._v(" "),a("p",[e._v("当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完全加载。")]),e._v(" "),a("h3",{attrs:{id:"onload-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onload-event","aria-hidden":"true"}},[e._v("#")]),e._v(" Onload Event")]),e._v(" "),a("p",[e._v("当整个页面及所有依赖资源如样式表和图片都已完成加载时，将触发 load 事件。")]),e._v(" "),a("p",[e._v("它与 DOMContentLoaded 不同，后者只要页面 DOM 加载完成就触发，无需等待依赖资源的加载。")]),e._v(" "),a("h3",{attrs:{id:"speed-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#speed-index","aria-hidden":"true"}},[e._v("#")]),e._v(" Speed Index")]),e._v(" "),a("p",[e._v("速度指数表明了网页内容的可见填充速度。")]),e._v(" "),a("h2",{attrs:{id:"工具面板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具面板","aria-hidden":"true"}},[e._v("#")]),e._v(" 工具面板")]),e._v(" "),a("ul",[a("li",[e._v("Performance 性能面板")]),e._v(" "),a("li",[e._v("Network 网络面板")]),e._v(" "),a("li",[e._v("Lighthouse-Audits 灯塔-性能分析报告面板")])]),e._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://web.dev/user-centric-performance-metrics/#user-centric_performance_metrics",target:"_blank",rel:"noopener noreferrer"}},[e._v("以用户为中心的性能指标"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://developer.chrome.com/docs/devtools/speed/get-started/",target:"_blank",rel:"noopener noreferrer"}},[e._v("优化网站速度"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://developer.chrome.com/docs/devtools/evaluate-performance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("分析运行时性能"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/hongrunhui/p/8929001.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chrome 的 First Paint 触发的时机探究"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);